(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{113:function(t,e,a){"use strict";a.r(e);var n=a(0),s=Object(n.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"nginx-with-geoip2-on-ubuntu"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#nginx-with-geoip2-on-ubuntu"}},[t._v("#")]),t._v(" Nginx with GeoIP2 on Ubuntu")]),t._v(" "),a("p",[t._v("In the web you can find a lot of tutorials how to use the GeoIP module for nginx but Maxmind - the company that is providing the database for countries and cities is deprecating their old database format "),a("strong",[t._v("dat")]),t._v(" and replacing it with a new format - "),a("strong",[t._v("mmdb")]),t._v(". The nginx setup for this new format is different and requires building the module from source since there is no official support for nginx provided by the company as stated in their "),a("a",{attrs:{href:"https://dev.maxmind.com/geoip/geoip2/downloadable/",target:"_blank",rel:"noopener noreferrer"}},[t._v("downloads"),a("OutboundLink")],1),t._v(" page. I couldn't find a super easy guide for the new "),a("strong",[t._v("GeoIP2")]),t._v(" so here I am putting all the steps in case I need to do it again or if someone else is having issues with the other guides online. The guide is for Ubuntu but can be easily addapted to any Debian based systems.")]),t._v(" "),a("h3",{attrs:{id:"download-the-nginx-source-and-the-geoip2-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#download-the-nginx-source-and-the-geoip2-module"}},[t._v("#")]),t._v(" Download the nginx source and the geoip2 module.")]),t._v(" "),a("p",[a("em",[t._v("You may want to update the link to the current version of nginx that you have installed")])]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" http://nginx.org/download/nginx-1.16.1.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" zxvf nginx-1.16.1.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("wget")]),t._v(" https://github.com/leev/ngx_http_geoip2_module/archive/master.tar.gz ngx_http_geoip2_module.tar.gz\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("tar")]),t._v(" zxvf ngx_http_geoip2_module.tar.gz\n")])])]),a("h3",{attrs:{id:"install-maxmind-s-ppa-and-the-libraries-required-to-build-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-maxmind-s-ppa-and-the-libraries-required-to-build-nginx"}},[t._v("#")]),t._v(" Install Maxmind's ppa and the libraries required to build nginx")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("sudo")]),t._v(" add-apt-repository ppa:maxmind/ppa\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" update\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" libmaxminddb0 libmaxminddb-dev mmdb-bin geoipupdate \n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("apt")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v(" libpcre3 libpcre3-dev zlib1g zlib1g-dev libssl-dev\n")])])]),a("h3",{attrs:{id:"regularly-update-the-geoip2-database"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regularly-update-the-geoip2-database"}},[t._v("#")]),t._v(" Regularly update the geoip2 database")]),t._v(" "),a("p",[t._v("Set a cronjob to update the geoip database.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[t._v("58")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("13")]),t._v(" * * "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(" /usr/local/bin/geoipupdate "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">>")]),t._v(" /dev/null "),a("span",{pre:!0,attrs:{class:"token operator"}},[a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("2")]),t._v(">")]),a("span",{pre:!0,attrs:{class:"token file-descriptor important"}},[t._v("&1")]),t._v("\n")])])]),a("p",[t._v("And it is good to run the update now so you have the latest data right away.")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v("geoipupdate\n")])])]),a("h3",{attrs:{id:"build-nginx-with-the-geoip2-module"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#build-nginx-with-the-geoip2-module"}},[t._v("#")]),t._v(" Build nginx with the geoip2 module")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" nginx-1.16.1\n./configure  --add-dynamic-module"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("/ngx_http_geoip2_module-master "),a("span",{pre:!0,attrs:{class:"token variable"}},[a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$(")]),t._v("nginx -V"),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v(")")])]),t._v(" --with-compat\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("make")]),t._v("\n")])])]),a("p",[t._v("Make sure to include "),a("code",[t._v("--with-compat")]),t._v(" while executing "),a("code",[t._v("configure")]),t._v(" because when you try to install the module you may get the following error:"),a("br"),t._v(" "),a("em",[t._v("nginx: [emerg] module is not binary compatible")])]),t._v(" "),a("h3",{attrs:{id:"install-the-new-dynamic-module-in-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#install-the-new-dynamic-module-in-nginx"}},[t._v("#")]),t._v(" Install the new dynamic module in nginx")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[t._v("cp")]),t._v(" objs/ngx_http_geoip2_module.so /usr/lib/nginx/modules/\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"load_module modules/ngx_http_geoip2_module.so;"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" /etc/nginx/modules-available/mod-http-geoip2.conf\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ln")]),t._v(" -s /etc/nginx/modules-available/mod-http-geoip2.conf /etc/nginx/modules-enabled/60-mod-http-geoip2.conf\n")])])]),a("h3",{attrs:{id:"setup-nginx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#setup-nginx"}},[t._v("#")]),t._v(" Setup nginx")]),t._v(" "),a("p",[t._v("In "),a("code",[t._v("/etc/nginx/nginx.conf")]),t._v(" in "),a("code",[t._v("http")]),t._v(" section add the following code to enable the geoip2 and automatically reload the databases if needed and pass the data to php with fastcgi params.")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("geoip2 /usr/share/GeoIP/GeoLite2-Country.mmdb {\n    auto_reload 60m;\n    $geoip2_metadata_country_build metadata build_epoch;\n    $geoip2_data_country_code country iso_code;\n    $geoip2_data_country_name country names en;\n}\n\ngeoip2 /usr/share/GeoIP/GeoLite2-City.mmdb {\n    auto_reload 60m;\n    $geoip2_metadata_city_build metadata build_epoch;\n    $geoip2_data_city_name city names en;\n}\n\nfastcgi_param COUNTRY_CODE $geoip2_data_country_code;\nfastcgi_param COUNTRY_NAME $geoip2_data_country_name;\nfastcgi_param CITY_NAME    $geoip2_data_city_name;\n")])])]),a("h3",{attrs:{id:"how-to-block-countries"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-block-countries"}},[t._v("#")]),t._v(" How to block countries")]),t._v(" "),a("p",[t._v("Again in "),a("code",[t._v("/etc/nginx/nginx.conf")]),t._v(" in "),a("code",[t._v("http")]),t._v(" section using a map with allowed/disallowed countries define a variable that you can use in the vhosts files.")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("map $geoip2_data_country_code $domain_xyz_allowed_country {\n    default yes;\n    BG no;\n}\n")])])]),a("p",[t._v("In the "),a("strong",[t._v("vhost configuration")]),t._v(" determine what to do if the country is not allowed. Usually block it.")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location / {\n    if ($domain_xyz_allowed_country = no) {\n        return 444;\n    }\n}\n")])])]),a("h3",{attrs:{id:"redirect-to-country-specific-domain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#redirect-to-country-specific-domain"}},[t._v("#")]),t._v(" Redirect to country-specific domain")]),t._v(" "),a("p",[t._v("Similar logic could be used for location redirect. For example if you have multiple domains for different countries (google.com for USA, google.bg for Bulgaria, etc).\nTo setup the dedirect use the "),a("code",[t._v("$geoip2_data_country_code")]),t._v(" variable to decide whether or where the visitor should be redirected.")]),t._v(" "),a("p",[t._v("In the "),a("strong",[t._v("vhost configuration")]),t._v(" of the main domain (e.g. "),a("em",[t._v("google.com")]),t._v(")")]),t._v(" "),a("div",{staticClass:"language-text extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("location / {\n    if ($geoip2_data_country_code = BG) {\n        return 301 https://google.bg$request_uri;\n    }\n}\n")])])])])}),[],!1,null,null,null);e.default=s.exports}}]);